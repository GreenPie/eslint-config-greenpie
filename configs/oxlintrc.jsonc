{
  "$schema": "../node_modules/oxlint/configuration_schema.json",

  "plugins": [
    "eslint",
    "import",
    "jsdoc",
    "oxc",
    "promise",
    "typescript",
    "unicorn",
    "vitest",
    "vue"
  ],

  "categories": {
    "correctness": "off",
    "nursery": "off",
    "pedantic": "off",
    "perf": "off",
    "restriction": "off",
    "style": "off",
    "suspicious": "off"
  },

  // Releases: https://github.com/oxc-project/oxc/releases
  // Rules: https://oxc.rs/docs/guide/usage/linter/rules.html
  "rules": {
    /**
     * Correctness rules
     */

    // ESLint

    "eslint/for-direction": "error",
    "eslint/no-async-promise-executor": "error",
    "eslint/no-caller": "error",
    "eslint/no-class-assign": "error",
    "eslint/no-compare-neg-zero": "error",
    "eslint/no-cond-assign": "error",
    "eslint/no-const-assign": "error",
    "eslint/no-constant-binary-expression": "error",
    "eslint/no-constant-condition": "error",
    "eslint/no-control-regex": "error",
    "eslint/no-debugger": "error",
    "eslint/no-delete-var": "error",
    "eslint/no-dupe-class-members": "error",
    "eslint/no-dupe-else-if": "error",
    "eslint/no-dupe-keys": "error",
    "eslint/no-duplicate-case": "error",
    "eslint/no-empty-character-class": "error",
    "eslint/no-empty-pattern": "error",
    "eslint/no-empty-static-block": "error",
    "eslint/no-eval": "error",
    "eslint/no-ex-assign": "error",

    "eslint/no-extra-boolean-cast": ["error", {
      "enforceForInnerExpressions": true
    }],

    "eslint/no-func-assign": "error",
    "eslint/no-global-assign": "error",
    "eslint/no-import-assign": "error",
    "eslint/no-invalid-regexp": "error",
    "eslint/no-irregular-whitespace": "error",
    "eslint/no-loss-of-precision": "error",
    "eslint/no-new-native-nonconstructor": "error",
    "eslint/no-nonoctal-decimal-escape": "error",
    "eslint/no-obj-calls": "error",
    "eslint/no-self-assign": "error",
    "eslint/no-setter-return": "error",
    "eslint/no-shadow-restricted-names": "error",
    "eslint/no-sparse-arrays": "error",
    "eslint/no-this-before-super": "error",
    "eslint/no-unassigned-vars": "error",
    "eslint/no-unsafe-finally": "error",
    "eslint/no-unsafe-negation": "error",
    "eslint/no-unsafe-optional-chaining": "error",
    "eslint/no-unused-labels": "error",
    "eslint/no-unused-private-class-members": "error",
    "eslint/no-unused-vars": "error",
    "eslint/no-useless-backreference": "error",
    "eslint/no-useless-catch": "error",
    "eslint/no-useless-escape": "error",
    "eslint/no-useless-rename": "error",
    "eslint/no-with": "error",
    "eslint/require-yield": "error",
    "eslint/use-isnan": "error",
    "eslint/valid-typeof": "error",

    // Import

    "import/default": "error",
    "import/namespace": "error",

    // JSDoc

    "jsdoc/check-property-names": "error",
    "jsdoc/check-tag-names": "error",
    "jsdoc/implements-on-classes": "error",
    "jsdoc/no-defaults": "error",
    "jsdoc/require-property": "error",
    "jsdoc/require-property-description": "error",
    "jsdoc/require-property-name": "error",
    "jsdoc/require-property-type": "error",
    "jsdoc/require-yields": "error",

    // Oxc

    "oxc/bad-array-method-on-arguments": "error",
    "oxc/bad-char-at-comparison": "error",
    "oxc/bad-comparison-sequence": "error",
    "oxc/bad-min-max-func": "error",
    "oxc/bad-object-literal-comparison": "error",
    "oxc/bad-replace-all-arg": "error",
    "oxc/const-comparisons": "error",
    "oxc/double-comparisons": "error",
    "oxc/erasing-op": "error",
    "oxc/missing-throw": "error",
    "oxc/number-arg-out-of-range": "error",
    "oxc/only-used-in-recursion": "error",
    "oxc/uninvoked-array-callback": "error",

    // Promise

    "promise/no-callback-in-promise": "error",
    "promise/no-new-statics": "error",
    "promise/valid-params": "error",

    // TypeScript

    "typescript/await-thenable": "error",
    "typescript/no-array-delete": "error",
    "typescript/no-base-to-string": "error",
    "typescript/no-confusing-void-expression": "error",
    "typescript/no-duplicate-enum-values": "error",
    "typescript/no-duplicate-type-constituents": "error",
    "typescript/no-extra-non-null-assertion": "error",
    "typescript/no-floating-promises": "error",
    "typescript/no-for-in-array": "error",
    "typescript/no-implied-eval": "error",
    "typescript/no-meaningless-void-operator": "error",
    "typescript/no-misused-new": "error",
    "typescript/no-misused-spread": "error",
    "typescript/no-non-null-asserted-optional-chain": "error",
    "typescript/no-redundant-type-constituents": "error",
    "typescript/no-this-alias": "error",
    "typescript/no-unnecessary-parameter-property-assignment": "error",
    "typescript/no-unsafe-declaration-merging": "error",
    "typescript/no-unsafe-unary-minus": "error",
    "typescript/no-useless-empty-export": "error",
    "typescript/no-wrapper-object-types": "error",
    "typescript/prefer-as-const": "error",
    "typescript/require-array-sort-compare": "error",
    "typescript/restrict-template-expressions": "error",
    "typescript/triple-slash-reference": "error",
    "typescript/unbound-method": "error",

    // Unicorn

    "unicorn/no-await-in-promise-methods": "error",
    "unicorn/no-empty-file": "error",
    "unicorn/no-invalid-fetch-options": "error",
    "unicorn/no-invalid-remove-event-listener": "error",
    "unicorn/no-new-array": "error",
    "unicorn/no-single-promise-in-promise-methods": "error",
    "unicorn/no-thenable": "error",
    "unicorn/no-unnecessary-await": "error",
    "unicorn/no-useless-fallback-in-spread": "error",
    "unicorn/no-useless-length-check": "error",
    "unicorn/no-useless-spread": "error",
    "unicorn/prefer-set-size": "error",
    "unicorn/prefer-string-starts-ends-with": "error",

    // Vitest

    "vitest/no-conditional-tests": "error",
    "vitest/require-local-test-context-for-concurrent-snapshots": "error",

    // Vue

    "vue/valid-define-emits": "error",
    "vue/valid-define-props": "error",

    /**
     * Perf rules
     */

    // ESLint

    "eslint/no-await-in-loop": "error",
    "eslint/no-useless-call": "error",

    // Oxc

    "oxc/no-accumulating-spread": "error",

    // Unicorn

    "unicorn/prefer-array-find": "error",
    "unicorn/prefer-array-flat-map": "error",
    "unicorn/prefer-set-has": "error",

    /**
     * Restriction rules
     */

    // ESLint

    "eslint/class-methods-use-this": "error",
    "eslint/default-case": "off", // TypeScript can be even more restrictive
    "eslint/no-alert": "error",
    "eslint/no-bitwise": "error",
    "eslint/no-console": "error",
    "eslint/no-div-regex": "error",
    "eslint/no-empty": "error",
    "eslint/no-empty-function": "error",
    "eslint/no-eq-null": "error",
    "eslint/no-iterator": "error",
    "eslint/no-plusplus": "error",
    "eslint/no-proto": "error",
    "eslint/no-regex-spaces": "error",
    "eslint/no-restricted-globals": "error",
    "eslint/no-restricted-imports": "error",
    "eslint/no-undefined": "off", // undefined should be handled in TypeScript
    "eslint/no-unused-expressions": "error",
    "eslint/no-var": "error",

    "eslint/no-void": ["error", {
      "allowAsStatement": true
    }],

    "eslint/unicode-bom": "error",

    // Import

    "import/extensions": "error",
    "import/no-amd": "error",
    "import/no-commonjs": "error",
    "import/no-cycle": "error",
    "import/no-default-export": "error",
    "import/no-dynamic-require": "error",
    "import/no-webpack-loader-syntax": "error",
    "import/unambiguous": "off", // Seems useless

    // JSDoc

    "jsdoc/check-access": "error",
    "jsdoc/empty-tags": "error",

    // Oxc

    "oxc/bad-bitwise-operator": "error",
    "oxc/no-async-await": "off", // async/await are good
    "oxc/no-barrel-file": "error",
    "oxc/no-const-enum": "off", // TODO: Can be enabled later
    "oxc/no-optional-chaining": "off", // Optional chaining is useful
    "oxc/no-rest-spread-properties": "off", // Rest/spread properties are sometimes useful

    // Promise

    "promise/catch-or-return": "error",
    "promise/spec-only": "error",

    // TypeScript

    "typescript/explicit-function-return-type": "off", // TODO: Inferred return types are often better
    "typescript/explicit-module-boundary-types": "off", // TODO: Inferred types are often better
    "typescript/no-dynamic-delete": "error",
    "typescript/no-empty-object-type": "error",
    "typescript/no-explicit-any": "error",
    "typescript/no-import-type-side-effects": "error",
    "typescript/no-namespace": "error",
    "typescript/no-non-null-asserted-nullish-coalescing": "error",
    "typescript/no-non-null-assertion": "error",
    "typescript/no-require-imports": "error",
    "typescript/no-var-requires": "error",
    "typescript/non-nullable-type-assertion-style": "error",
    "typescript/prefer-literal-enum-member": "error",
    "typescript/promise-function-async": "error",
    "typescript/use-unknown-in-catch-callback-variable": "error",

    // Unicorn

    "unicorn/no-abusive-eslint-disable": "error",
    "unicorn/no-anonymous-default-export": "error",
    "unicorn/no-array-for-each": "error",
    "unicorn/no-array-reduce": "error",
    "unicorn/no-document-cookie": "error",
    "unicorn/no-length-as-slice-end": "error",
    "unicorn/no-magic-array-flat-depth": "error",
    "unicorn/no-process-exit": "error",
    "unicorn/prefer-modern-math-apis": "error",
    "unicorn/prefer-node-protocol": "error",
    "unicorn/prefer-number-properties": "error",

    // Vue
    "vue/no-multiple-slot-args": "error",

    /**
     * Suspicious rules
     */

    // ESLint

    "eslint/block-scoped-var": "error",
    "eslint/no-extend-native": "error",
    "eslint/no-extra-bind": "error",
    "eslint/no-new": "error",
    "eslint/no-unexpected-multiline": "error",
    "eslint/no-unneeded-ternary": "error",
    "eslint/no-useless-concat": "error",
    "eslint/no-useless-constructor": "error",
    "eslint/preserve-caught-error": "error",

    // Import

    "import/no-absolute-path": "error",
    "import/no-empty-named-blocks": "error",
    "import/no-named-as-default": "error",
    "import/no-named-as-default-member": "error",
    "import/no-self-import": "error",
    "import/no-unassigned-import": "error",

    // Oxc

    "oxc/approx-constant": "error",
    "oxc/misrefactored-assign-op": "error",
    "oxc/no-async-endpoint-handlers": "error",

    // Promise

    "promise/always-return": "error",
    "promise/no-promise-in-callback": "error",

    // TypeScript

    "typescript/no-confusing-non-null-assertion": "error",
    "typescript/no-extraneous-class": "error",
    "typescript/no-unnecessary-boolean-literal-compare": "error",
    "typescript/no-unnecessary-template-expression": "error",
    "typescript/no-unnecessary-type-arguments": "error",
    "typescript/no-unnecessary-type-assertion": "error",
    "typescript/no-unnecessary-type-constraint": "error",
    "typescript/no-unsafe-enum-comparison": "error",
    "typescript/no-unsafe-type-assertion": "error",

    // Unicorn

    "unicorn/consistent-function-scoping": "error",
    "unicorn/no-accessor-recursion": "error",
    "unicorn/no-array-reverse": "error",
    "unicorn/no-instanceof-builtins": "error",
    "unicorn/prefer-add-event-listener": "error",
    "unicorn/require-post-message-target-origin": "error",

    /**
     * Pedantic rules
     */

    // ESLint

    "eslint/array-callback-return": "error",
    "eslint/eqeqeq": "error",
    "eslint/max-classes-per-file": "error",
    "eslint/max-depth": "error",

    "eslint/max-lines": ["error", {
      "max": 300,
      "skipComments": true,
      "skipBlankLines": true
    }],

    "eslint/max-lines-per-function": "off", // Seems to be too strict
    "eslint/max-nested-callbacks": "error",
    "eslint/no-array-constructor": "error",
    "eslint/no-case-declarations": "error",
    "eslint/no-constructor-return": "error",
    "eslint/no-else-return": "error",
    "eslint/no-fallthrough": "error",
    "eslint/no-inner-declarations": "error",
    "eslint/no-lonely-if": "error",
    "eslint/no-negated-condition": "error",
    "eslint/no-new-wrappers": "error",
    "eslint/no-object-constructor": "error",
    "eslint/no-prototype-builtins": "error",
    "eslint/no-redeclare": "error",
    "eslint/no-self-compare": "error",
    "eslint/no-throw-literal": "error",
    "eslint/radix": "error",
    "eslint/require-await": "off", // @typescript-eslint already checks for this (promise-function-async / require-await)
    "eslint/sort-vars": "error",
    "eslint/symbol-description": "error",

    // Import

    "import/max-dependencies": "off", // TODO: Not sure how it might be useful. Potentially reducing complexity.

    // JSDoc

    "jsdoc/require-param": "off", // TODO: probably not needed when types annotated correctly
    "jsdoc/require-param-description": "error",
    "jsdoc/require-param-name": "error",
    "jsdoc/require-param-type": "off", // TypeScript doing this job
    "jsdoc/require-returns": "off", // TypeScript doing this job
    "jsdoc/require-returns-description": "error",
    "jsdoc/require-returns-type": "off", // TODO: probably not needed when types annotated correctly

    // TypeScript

    "typescript/ban-ts-comment": ["error", {
      "minimumDescriptionLength": 10
    }],

    "typescript/ban-types": "error", // TODO: deprecated in @typescript-eslint
    "typescript/no-misused-promises": "error",
    "typescript/no-mixed-enums": "error",
    "typescript/no-unsafe-argument": "error",
    "typescript/no-unsafe-assignment": "error",
    "typescript/no-unsafe-call": "error",
    "typescript/no-unsafe-function-type": "error",
    "typescript/no-unsafe-member-access": "error",
    "typescript/no-unsafe-return": "error",
    "typescript/only-throw-error": "error",
    "typescript/prefer-enum-initializers": "error",
    "typescript/prefer-promise-reject-errors": "error",
    "typescript/prefer-ts-expect-error": "error", // TODO: deprecated in @typescript-eslint
    "typescript/related-getter-setter-pairs": "error",
    "typescript/require-await": "error",
    "typescript/restrict-plus-operands": "error",
    "typescript/return-await": "error",
    "typescript/switch-exhaustiveness-check": "error",

    // Unicorn

    "unicorn/consistent-assert": "error",
    "unicorn/consistent-empty-array-spread": "error",
    "unicorn/escape-case": "error",
    "unicorn/explicit-length-check": "error",
    "unicorn/new-for-builtins": "error",
    "unicorn/no-hex-escape": "error",
    "unicorn/no-instanceof-array": "error",
    "unicorn/no-lonely-if": "error",
    "unicorn/no-negation-in-equality-check": "error",
    "unicorn/no-new-buffer": "error",
    "unicorn/no-object-as-default-parameter": "error",
    "unicorn/no-static-only-class": "error",
    "unicorn/no-this-assignment": "error",
    "unicorn/no-typeof-undefined": "error",
    "unicorn/no-unnecessary-array-flat-depth": "error",
    "unicorn/no-unnecessary-slice-end": "error",
    "unicorn/no-unreadable-iife": "error",
    "unicorn/no-useless-promise-resolve-reject": "error",
    "unicorn/no-useless-switch-case": "error",
    "unicorn/no-useless-undefined": "error",
    "unicorn/prefer-array-flat": "error",
    "unicorn/prefer-array-some": "error",
    "unicorn/prefer-blob-reading-methods": "error",
    "unicorn/prefer-code-point": "error",
    "unicorn/prefer-date-now": "error",
    "unicorn/prefer-dom-node-append": "error",
    "unicorn/prefer-dom-node-dataset": "error",
    "unicorn/prefer-dom-node-remove": "error",
    "unicorn/prefer-event-target": "error",
    "unicorn/prefer-math-min-max": "error",
    "unicorn/prefer-math-trunc": "error",
    "unicorn/prefer-native-coercion-functions": "error",
    "unicorn/prefer-prototype-methods": "error",
    "unicorn/prefer-query-selector": "error",
    "unicorn/prefer-regexp-test": "error",
    "unicorn/prefer-string-replace-all": "error",
    "unicorn/prefer-string-slice": "error",
    "unicorn/prefer-type-error": "error",
    "unicorn/require-number-to-fixed-digits-argument": "error",

    /**
     * Style rules
     */

    // ESLint

    "eslint/arrow-body-style": "error",
    "eslint/curly": "error",
    "eslint/default-case-last": "error",
    "eslint/default-param-last": "error",
    "eslint/func-names": "error",

    "eslint/func-style": ["error", "declaration", {
      "allowArrowFunctions": true
    }],

    "eslint/grouped-accessor-pairs": ["error", {
      "enforceForTSTypes": true
    }],

    "eslint/guard-for-in": "error",

    "eslint/id-length": ["error", {
      // t — for translations
      "exceptions": ["t"],
      "max": 40
    }],

    "eslint/init-declarations": "error",
    "eslint/max-params": "error",
    "eslint/new-cap": "error",
    "eslint/no-continue": "error",
    "eslint/no-duplicate-imports": "error",
    "eslint/no-extra-label": "error",
    "eslint/no-label-var": "error",
    "eslint/no-labels": "error",
    "eslint/no-lone-blocks": "error",

    "eslint/no-magic-numbers": ["warn", {
      "enforceConst": true,
      "detectObjects": true
    }],

    "eslint/no-multi-assign": "error",
    "eslint/no-multi-str": "error",
    "eslint/no-nested-ternary": "error",
    "eslint/no-new-func": "error",
    "eslint/no-return-assign": "error",
    "eslint/no-script-url": "error",
    "eslint/no-template-curly-in-string": "error",
    "eslint/no-useless-computed-key": "error",
    "eslint/no-ternary": "off", // Why not to use it in simple cases like "a ? b : c"
    "eslint/operator-assignment": "error",
    "eslint/prefer-destructuring": "error",
    "eslint/prefer-exponentiation-operator": "error",
    "eslint/prefer-numeric-literals": "error",
    "eslint/prefer-object-has-own": "error",
    "eslint/prefer-object-spread": "error",
    "eslint/prefer-promise-reject-errors": "error",
    "eslint/prefer-rest-params": "error",
    "eslint/prefer-spread": "error",
    "eslint/prefer-template": "error",

    "eslint/sort-imports": ["error", {
      "ignoreDeclarationSort": true,
      "ignoreMemberSort": true
    }],

    "eslint/sort-keys": "off", // TODO: Can be enabled later
    "eslint/vars-on-top": "error",
    "eslint/yoda": "error",

    // Import

    "import/consistent-type-specifier-style": "off", // TODO: no-import-type-side-effects is conflicting
    "import/exports-last": "error",
    "import/first": "error",
    "import/group-exports": "error",
    "import/no-anonymous-default-export": "error",
    "import/no-duplicates": "error",
    "import/no-mutable-exports": "error",
    "import/no-named-default": "error",
    "import/no-namespace": "error",
    "import/prefer-default-export": "off", // no-default-export is already enabled

    // Promise

    "promise/avoid-new": "error",
    "promise/no-nesting": "error",
    "promise/no-return-wrap": "error",
    "promise/param-names": "error",
    "promise/prefer-await-to-callbacks": "error",
    "promise/prefer-await-to-then": "error",
    "promise/prefer-catch": "error",

    // TypeScript

    "typescript/adjacent-overload-signatures": "error",
    "typescript/array-type": "error",
    "typescript/ban-tslint-comment": "error",
    "typescript/consistent-generic-constructors": "error",
    "typescript/consistent-indexed-object-style": "error",
    "typescript/consistent-type-definitions": "error",
    "typescript/consistent-type-imports": "error",
    "typescript/no-empty-interface": "error",
    "typescript/no-inferrable-types": "error",
    "typescript/prefer-for-of": "error",
    "typescript/prefer-function-type": "error",
    "typescript/prefer-namespace-keyword": "error",
    "typescript/prefer-reduce-type-parameter": "error",
    "typescript/prefer-return-this-type": "error",

    // Unicorn

    "unicorn/catch-error-name": "error",
    "unicorn/consistent-date-clone": "error",
    "unicorn/consistent-existence-index-check": "error",
    "unicorn/empty-brace-spaces": "error",
    "unicorn/error-message": "error",
    "unicorn/filename-case": "error",
    "unicorn/no-array-method-this-argument": "error",
    "unicorn/no-await-expression-member": "error",
    "unicorn/no-console-spaces": "error",
    "unicorn/no-nested-ternary": "error",
    "unicorn/no-null": "off", // null is good for TypeScript
    "unicorn/no-unreadable-array-destructuring": "error",
    "unicorn/no-zero-fractions": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/numeric-separators-style": "error",
    "unicorn/prefer-array-index-of": "error",
    "unicorn/prefer-dom-node-text-content": "error",
    "unicorn/prefer-global-this": "error",
    "unicorn/prefer-includes": "error",
    "unicorn/prefer-logical-operator-over-ternary": "error",
    "unicorn/prefer-modern-dom-apis": "error",
    "unicorn/prefer-negative-index": "error",
    "unicorn/prefer-object-from-entries": "error",
    "unicorn/prefer-optional-catch-binding": "error",
    "unicorn/prefer-reflect-apply": "error",
    "unicorn/prefer-spread": "error",
    "unicorn/prefer-string-raw": "error",
    "unicorn/prefer-string-trim-start-end": "error",
    "unicorn/prefer-structured-clone": "error",
    "unicorn/require-array-join-separator": "error",
    "unicorn/switch-case-braces": "error",
    "unicorn/text-encoding-identifier-case": "error",
    "unicorn/throw-new-error": "error",

    // Vitest

    "vitest/no-import-node-test": "error",
    "vitest/prefer-to-be-falsy": "error",
    "vitest/prefer-to-be-object": "error",
    "vitest/prefer-to-be-truthy": "error",

    // Vue
    "vue/define-emits-declaration": "error",
    "vue/define-props-declaration": "error",

    /**
     * Nursery rules
     */

    // ESLint

    "eslint/getter-return": "error",
    "eslint/no-undef": "error",
    "eslint/no-unreachable": "error",

    // Import

    "import/export": "error",
    "import/named": "error",

    // Oxc

    "oxc/no-map-spread": "error",

    // Promise

    "promise/no-return-in-finally": "error"
  },

  "overrides": [{
    "files": ["**/*.vue"],

    "globals": {
      "defineProps": "readonly",
      "withDefaults": "readonly",
      "defineEmits": "readonly",
      "defineModel": "readonly",
      "defineExpose": "readonly",
      "defineSlots": "readonly"
    }
  }]
}
